<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yeyouluo.github.io</id>
    <title>Ye Youluo&apos;s Blog</title>
    <updated>2020-05-21T15:32:06.945Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yeyouluo.github.io"/>
    <link rel="self" href="https://yeyouluo.github.io/atom.xml"/>
    <subtitle>知识，本该纯粹真实。 不应为乱象而迷失，因避讳而藏掖。</subtitle>
    <logo>https://yeyouluo.github.io/images/avatar.png</logo>
    <icon>https://yeyouluo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ye Youluo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[SpringBoot捕获全局异常]]></title>
        <id>https://yeyouluo.github.io/post/springboot-bu-huo-quan-ju-yi-chang/</id>
        <link href="https://yeyouluo.github.io/post/springboot-bu-huo-quan-ju-yi-chang/">
        </link>
        <updated>2020-05-21T15:16:14.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="理论">理论</h2>
<ul>
<li>从 spring 3.2 开始，新增了 <code>@ControllerAdvice</code> 注解，可以用于定义 <code>@ExceptionHandler</code>，并应用到配置了 <code>@RequestMapping</code> 的控制器中。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="理论">理论</h2>
<ul>
<li>
<p>从 spring 3.2 开始，新增了 <code>@ControllerAdvice</code> 注解，可以用于定义 <code>@ExceptionHandler</code>，并应用到配置了 <code>@RequestMapping</code> 的控制器中。</p>
<!-- more -->
<h2 id="操作">操作</h2>
<ol>
<li>定义全局异常捕捉Controller</li>
</ol>
<pre><code class="language-java">package com.yeyouluo.hellospringboot.exception;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;

@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(value = RuntimeException.class)
    @ResponseBody
    public String handle() {
        return &quot;捕获到全局RuntimeException&quot;;
    }
}
</code></pre>
</li>
</ul>
<ol start="2">
<li>抛出异常<pre><code class="language-java">@GetMapping(&quot;/exception&quot;)
 public String testException(){
     System.out.println(&quot;开始&quot;);

     System.out.println(2/0);

     System.out.println(&quot;结束&quot;);
     return &quot;SpringBoot OK&quot;;
 }
</code></pre>
</li>
<li>结果验证<br>
<img src="https://yeyouluo.github.io/post-images/1590075093881.png" alt="" loading="lazy"></li>
</ol>
<h2 id="局限">局限</h2>
<p>使用 <code>@ControllerAdvice</code>处理异常也有一定的 局限性。只有进入 Controller 层的错误，才会由 <code>@ControllerAdvice</code> 处理。拦截器 抛出的错误，以及 访问错误地址 的情况 <code>@ControllerAdvice</code> 处理不了，由 Spring Boot 默认的 异常处理机制 处理。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://blog.csdn.net/baidu_22254181/java/article/details/80789076">实战Spring Boot 2.0系列(二) - 全局异常处理和测试</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot访问静态文件]]></title>
        <id>https://yeyouluo.github.io/post/springboot-fang-wen-jing-tai-wen-jian/</id>
        <link href="https://yeyouluo.github.io/post/springboot-fang-wen-jing-tai-wen-jian/">
        </link>
        <updated>2020-05-21T14:22:27.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="理论知识">理论知识</h2>
<p>SpringBoot默认扫描的静态目录为<code>static</code>，因此将静态文件放到<code>static</code>目录下就可以了。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="理论知识">理论知识</h2>
<p>SpringBoot默认扫描的静态目录为<code>static</code>，因此将静态文件放到<code>static</code>目录下就可以了。</p>
<!-- more -->
<h2 id="操作">操作</h2>
<ol>
<li>将静态文件放到<code>static</code>目录<br>
<img src="https://yeyouluo.github.io/post-images/1590071471333.png" alt="" loading="lazy"></li>
<li>访问，效果符合预期<br>
<img src="https://yeyouluo.github.io/post-images/1590071481534.png" alt="" loading="lazy"><br>
<img src="https://yeyouluo.github.io/post-images/1590071490901.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一个SpringBoot程序]]></title>
        <id>https://yeyouluo.github.io/post/springboot-01-hello-world/</id>
        <link href="https://yeyouluo.github.io/post/springboot-01-hello-world/">
        </link>
        <updated>2020-05-21T13:39:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="使用springboot-initializer创建项目">使用SpringBoot   initializer创建项目</h2>
<p>spring官方：https://start.springboot.io/<br>
阿里云：https://start.aliyun.com/<br>
Idea内置的initializer是spring官方的。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="使用springboot-initializer创建项目">使用SpringBoot   initializer创建项目</h2>
<p>spring官方：https://start.springboot.io/<br>
阿里云：https://start.aliyun.com/<br>
Idea内置的initializer是spring官方的。</p>
<!-- more -->
<h2 id="springboot官方文档">SpringBoot官方文档</h2>
<p>https://spring.io/projects/spring-boot</p>
<h2 id="步骤">步骤</h2>
<h3 id="生成项目">生成项目</h3>
<p><img src="https://yeyouluo.github.io/post-images/1590069974434.png" alt="" loading="lazy"><br>
<img src="https://yeyouluo.github.io/post-images/1590069986825.png" alt="" loading="lazy"></p>
<h3 id="编写controller">编写Controller</h3>
<p>要点：</p>
<ul>
<li>在入口类<code>HelloSpringbootApplication</code>平级目录建立Controller目录</li>
<li>Controller类使用<code>@RestController</code>或<code>@Controller</code>注解</li>
</ul>
<blockquote>
<p>查看源码，<code>@RestController</code>比<code>@Controller</code>多一个<code>@ResponseBody</code>注解，因此只能返回JSON值。如果要返回页面，应使用<code>@Controller</code>注解Controller类。</p>
</blockquote>
<ul>
<li>
<p>方法上使用<code>@RequestMapping</code>或<code>@GetMapping</code>注解</p>
<p>示例：</p>
<pre><code class="language-java">package com.yeyouluo.hellospringboot.controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class HelloController {
//    @GetMapping(value=&quot;/hello&quot;)
//    public String sayHello(String name){
//        return &quot;hello,&quot; + name;
//    }
//    @GetMapping(value=&quot;/hello&quot;)
//    public String sayHello(@RequestParam(value = &quot;name&quot;, required = false) String name){
//        return &quot;hello,&quot; + name;
//    }
    @GetMapping(value=&quot;/hello/{name}&quot;)
    public String sayHello(@PathVariable String name){
    return &quot;hello,&quot; + name;
    }
}

</code></pre>
</li>
</ul>
<h2 id="其他收获">其他收获</h2>
<p>传参数的两种形式：</p>
<ol>
<li>作为请求参数：方法的参数前使用<code>@RequestParam</code>注解或者不使用任何注解。二者区别在于：如果不写，相当于<code>@RequestParam(required = false)</code>。浏览器访问路径为<code>?key=xxx</code>。</li>
<li>作为路径参数：请求路径使用<code>{key}</code>构造路径，并且方法的参数前使用<code>@PathVariable</code>注解。浏览器访问路径为<code>/key</code>。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot资源整理]]></title>
        <id>https://yeyouluo.github.io/post/springboot-zi-yuan-zheng-li/</id>
        <link href="https://yeyouluo.github.io/post/springboot-zi-yuan-zheng-li/">
        </link>
        <updated>2020-05-21T12:04:03.000Z</updated>
        <summary type="html"><![CDATA[<p>本文主要收集SpringBoot网络资源。该文章会持续更新。<br>
若收录的资源涉及版权问题，请及时联系，我会予以删除整改。</p>
<h2 id="书籍">书籍</h2>
<ul>
<li><a href="http://blog.didispace.com/books/spring-boot-reference/">Spring Boot参考指南</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>本文主要收集SpringBoot网络资源。该文章会持续更新。<br>
若收录的资源涉及版权问题，请及时联系，我会予以删除整改。</p>
<h2 id="书籍">书籍</h2>
<ul>
<li><a href="http://blog.didispace.com/books/spring-boot-reference/">Spring Boot参考指南</a><!-- more -->
</li>
</ul>
<h2 id="网站">网站</h2>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">SpringBoot官方文档</a></li>
</ul>
<h2 id="github项目">Github项目</h2>
<ul>
<li><a href="https://github.com/ityouknow/spring-boot-examples">spring-boot-examples</a></li>
<li><a href="https://github.com/ityouknow/awesome-spring-boot">awesome-spring-boot</a></li>
<li><a href="https://github.com/wuyouzhuguli/SpringAll">SpringAll</a></li>
</ul>
<h2 id="视频">视频</h2>
<p>码家学院教程：<a href="https://pan.baidu.com/s/1Yv1ttP1_b6ORrTGLPQ1n1g">https://pan.baidu.com/s/1Yv1ttP1_b6ORrTGLPQ1n1g</a> 提取码：gcjo</p>
<blockquote>
<p>后续的几篇文章都是基于该视频，在此感谢~</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从hexo迁移到Gridea]]></title>
        <id>https://yeyouluo.github.io/post/hexo-to-gridea/</id>
        <link href="https://yeyouluo.github.io/post/hexo-to-gridea/">
        </link>
        <updated>2020-05-20T14:36:03.000Z</updated>
        <summary type="html"><![CDATA[<p>自从发现了Gridea这个静态博客写作神奇，直接抛弃了hexo。<br>
为什么呢？<br>
因为使用超级简单！</p>
]]></summary>
        <content type="html"><![CDATA[<p>自从发现了Gridea这个静态博客写作神奇，直接抛弃了hexo。<br>
为什么呢？<br>
因为使用超级简单！</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<blockquote>
<p>这几个特性来自Girdea官网，仔细阅读了一下，真的就是吸引我的地方。原封不动传话如下：</p>
</blockquote>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<blockquote>
<p>上面这一项真的很给力，直接省略了图床。</p>
</blockquote>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<h2 id="如何添加评论">如何添加评论</h2>
<p>我添加的是Gitalk评论。参考了<a href="https://www.xcnte.com/archives/731/">https://www.xcnte.com/archives/731/</a>。</p>
<h2 id="如何多端同步">如何多端同步</h2>
<p>将Gridea的整个数据目录使用坚果云同步。</p>
<figure data-type="image" tabindex="1"><img src="https://yeyouluo.github.io/post-images/1590067699691.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>