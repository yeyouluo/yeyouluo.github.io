<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yeyouluo.github.io</id>
    <title>Ye Youluo&apos;s Blog</title>
    <updated>2020-06-11T06:28:11.300Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yeyouluo.github.io"/>
    <link rel="self" href="https://yeyouluo.github.io/atom.xml"/>
    <subtitle>知识，本该纯粹真实。 不应为乱象而迷失，因避讳而藏掖。</subtitle>
    <logo>https://yeyouluo.github.io/images/avatar.png</logo>
    <icon>https://yeyouluo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ye Youluo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[解决postman无法发送数组参数的问题]]></title>
        <id>https://yeyouluo.github.io/post/jie-jue-postman-wu-fa-fa-song-shu-zu-can-shu-de-wen-ti/</id>
        <link href="https://yeyouluo.github.io/post/jie-jue-postman-wu-fa-fa-song-shu-zu-can-shu-de-wen-ti/">
        </link>
        <updated>2020-06-11T05:48:26.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="问题">问题</h2>
<p>postman在web开发中很有用。但我遇到了postman无法发送数组参数的问题。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="问题">问题</h2>
<p>postman在web开发中很有用。但我遇到了postman无法发送数组参数的问题。</p>
<!-- more -->
<h2 id="环境">环境</h2>
<ul>
<li>win10企业版</li>
<li>Postman-win64-6.1.4</li>
<li>web框架：<a href="https://github.com/visallo/webster/">webster</a></li>
</ul>
<h2 id="解决">解决</h2>
<h3 id="未成功">未成功</h3>
<p>参考链接：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_21205435/article/details/81909184">postman发送数组</a></li>
<li><a href="https://www.deepworker.online/article?id=18">如何使用postman传数组数据</a><br>
经过尝试，虽然没成功，但提供了一些解决问题的视角。在此衷心表示感谢。</li>
</ul>
<h3 id="成功">成功</h3>
<p><img src="https://yeyouluo.github.io/post-images/1591856505757.png" alt="" loading="lazy"><br>
解决思路比较简单，就是将这个key再写一次。<br>
这个解决思路是从后端错误追踪Webster源码得到的。具体内容后续文章展开。</p>
<h2 id="其他postman的资料">其他postman的资料</h2>
<ul>
<li><a href="https://www.jellythink.com/tool-tutorials/postman">果冻想博客--工具教程--postman</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins屏蔽windows、Linux slave差异]]></title>
        <id>https://yeyouluo.github.io/post/jenkins-ping-bi-windowslinux-slave-chai-yi/</id>
        <link href="https://yeyouluo.github.io/post/jenkins-ping-bi-windowslinux-slave-chai-yi/">
        </link>
        <updated>2020-06-06T14:07:31.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="背景及目标">背景及目标</h2>
<p>由于未能解决前端在linux上的打包问题，临时采用在slave（windows）上编译前端vue代码，再和master（linux）整合。如果使用jenkins pipeline作业，就可以在一个作业里整合全部的操作。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="背景及目标">背景及目标</h2>
<p>由于未能解决前端在linux上的打包问题，临时采用在slave（windows）上编译前端vue代码，再和master（linux）整合。如果使用jenkins pipeline作业，就可以在一个作业里整合全部的操作。</p>
<!-- more -->
<h2 id="环境说明">环境说明</h2>
<ul>
<li>Centos7</li>
<li>Jenkins 2.150.1</li>
<li>windows 10</li>
</ul>
<h2 id="前置工作">前置工作</h2>
<ul>
<li>配置windows slave，使用JNLP连接</li>
</ul>
<h2 id="pipeline脚本">pipeline脚本</h2>
<pre><code class="language-groovy">node(&quot;master&quot;){
    stage(&quot;环境清理&quot;){
	   sh '''
	        if [ ! -d &quot;${WORKSPACE}/../${JOB_NAME}_support&quot; ];then 
    			mkdir -p ${WORKSPACE}/../${JOB_NAME}_support
    		fi;
            if [ ! -f &quot;${WORKSPACE}/../${JOB_NAME}_support/dist.tgz&quot; ];then
				echo &quot;dist.tgz不存在！&quot;
			else
				rm -rf ${WORKSPACE}/../${JOB_NAME}_support/dist*
				echo &quot;删除dist.tgz成功！&quot;
			fi
        '''		
	}
}
node(&quot;windows-slave&quot;){
   stage('拉取代码') { // for display purposes
      // Get some code from a GitHub repository
      checkout([$class: 'GitSCM', branches: [[name: &quot;*/master&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c087b96d-3c22-4701-a51b-68a38b74d1a1', url: 'http://xxx-Front.git']]])
   }
   stage('npm打包'){
       bat '''![](https://yeyouluo.github.io/post-images/1591453418202.png)
            cd %WORKSPACE%
            rd /s/q dist
            npm run build
        '''
   }
    stage('传输部署包'){
       bat '''
            cd %WORKSPACE%
            tar zcvf dist.tgz dist
			scp dist.tgz hadoop@slave105:/home/hadoop/base/jenkins/data/workspace/%JOB_NAME%_support
        '''
   }
}

node(&quot;master&quot;){
   stage('拉取代码') { // for display purposes
      // Get some code from a GitHub repository
      checkout([$class: 'GitSCM', branches: [[name: &quot;*/6s&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c087b96d-3c22-4701-a51b-68a38b74d1a1', url: 'xxx-backend.git']]])
   }
   stage('整合前端文件') { // for display purposes
      sh '''
	    cd ${WORKSPACE}/../${JOB_NAME}_support
		tar zxvf dist.tgz
        if [ ! -d &quot;${WORKSPACE}/web/war/src/main/webapp&quot; ];then 
			mkdir -p ${WORKSPACE}/web/war/src/main/webapp
		fi;
		if [ -d &quot;${WORKSPACE}/web/war/src/main/webapp/static&quot; ];then 
			rm -rf ${WORKSPACE}/web/war/src/main/webapp/static
		fi;
		if [ -f &quot;${WORKSPACE}/web/war/src/main/webapp/index.html&quot; ];then 
			rm -f ${WORKSPACE}/web/war/src/main/webapp/index.html
		fi;		
        mv ${WORKSPACE}/../${JOB_NAME}_support/dist/* ${WORKSPACE}/web/war/src/main/webapp
      '''
   }
   stage('编译打包') { // for display purposes
   // Run the maven build
      if (isUnix()) {
         sh '''
            mvn clean package -DskipTests=true
         '''
       } else {
          bat(&quot;mvn clean package -DskipTests=true&quot;)
      }
   }
}
node(&quot;linux-slave-tomcat&quot;){
    stage('停止tomcat') { // for display purposes
  }
}
node(&quot;master&quot;){
  stage('替换war') { // for display purposes
  }
}
node(&quot;master&quot;){
  stage('启动tomcat') { // for display purposes

  }
}

</code></pre>
<h2 id="思路">思路</h2>
<ul>
<li>在windows slave上执行npm打包，将打包文件压缩成tarball（使用Cygwin环境命令），并上传到master jenkins data目录下（job平级目录创建了一个<code>_support</code>目录，tarball放到这个目录下）</li>
<li>在master主机上打包后端项目，并和前端部署脚本做整合</li>
<li>重启tomcat脚本去掉了，因为含有部分敏感信息。
<blockquote>
<p>由于主机等敏感信息来自于公司内网，因此上述脚本说了阉割处理。</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构与算法入门]]></title>
        <id>https://yeyouluo.github.io/post/shu-ju-jie-gou-yu-suan-fa-ru-men/</id>
        <link href="https://yeyouluo.github.io/post/shu-ju-jie-gou-yu-suan-fa-ru-men/">
        </link>
        <updated>2020-05-25T23:44:52.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="为什么要学习数据结构与算法">为什么要学习数据结构与算法</h2>
<ul>
<li>能够写出质量更高的代码</li>
<li>掌握数据结构与算法，有助于理解框架源码及框架的设计思想</li>
<li>应付大厂面试</li>
</ul>
<h2 id="数据机构与算法的关系">数据机构与算法的关系</h2>
<p>数据结构是为算法服务的，算法要作用在特定的数据结构之上。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="为什么要学习数据结构与算法">为什么要学习数据结构与算法</h2>
<ul>
<li>能够写出质量更高的代码</li>
<li>掌握数据结构与算法，有助于理解框架源码及框架的设计思想</li>
<li>应付大厂面试</li>
</ul>
<h2 id="数据机构与算法的关系">数据机构与算法的关系</h2>
<p>数据结构是为算法服务的，算法要作用在特定的数据结构之上。</p>
<!-- more -->
<h2 id="数据结构与算法学习重点">数据结构与算法学习重点</h2>
<ul>
<li>复杂度分析</li>
<li>数据结构与算法全景图（无需全部掌握）<br>
<img src="https://yeyouluo.github.io/post-images/1590451269433.jpg" alt="" loading="lazy"></li>
<li>常用点&amp;重点
<ul>
<li>10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树</li>
<li>10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法</li>
</ul>
</li>
</ul>
<h2 id="数据结构与算法学习技巧">数据结构与算法学习技巧</h2>
<ul>
<li>
<p>边学边练，适度刷题<br>
建议每周花 1～2 个小时的时间，自己用代码全部实现一遍。</p>
<blockquote>
<p>王争观点：可以“适度”刷题，但一定不要浪费太多时间在刷题上。我们学习的目的还是掌握，然后应用。除非你要面试 Google、Facebook 这样的公司，它们的算法题目非常非常难，必须大量刷题，才能在短期内提升应试正确率。如果是应对国内公司的技术面试，即便是 BAT 这样的公司，你只要彻底掌握这个专栏的内容，就足以应对。</p>
</blockquote>
</li>
<li>
<p>多问、多思考、多互动</p>
</li>
<li>
<p>打怪升级学习法</p>
<ul>
<li>设立一个切实可行的目标</li>
<li>要有输出（这也是我写系列学习笔记的目的所在）</li>
</ul>
</li>
<li>
<p>知识需要沉淀，不要想试图一下子掌握所有</p>
<blockquote>
<p>在学习的过程中，一定会碰到“拦路虎”。如果哪个知识点没有怎么学懂，不要着急，这是正常的。因为，想听一遍、看一遍就把所有知识掌握，这肯定是不可能的。学习知识的过程是反复迭代、不断沉淀的过程。</p>
</blockquote>
</li>
</ul>
<h2 id="复杂度分析">复杂度分析</h2>
<h3 id="复杂度分析课程地位">复杂度分析课程地位</h3>
<p>复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。</p>
<h3 id="为何需要复杂度分析">为何需要复杂度分析</h3>
<p><strong>事后统计法</strong>有很大的局限性：</p>
<ul>
<li>测试结果非常依赖测试环境</li>
<li>测试结果受数据规模的影响很大</li>
</ul>
<p>所以，我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法，即时间、空间复杂度分析方法。</p>
<h3 id="时间复杂度分析">时间复杂度分析</h3>
<h4 id="概念">概念</h4>
<p><strong>大 O 时间复杂度</strong>实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的<u>变化趋势</u>，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p>
<h4 id="时间复杂度实用方法">时间复杂度实用方法</h4>
<ol>
<li>只关注循环执行次数最多的一段代码</li>
<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>
</ol>
<h4 id="常见的时间复杂度">常见的时间复杂度</h4>
<p><img src="https://yeyouluo.github.io/post-images/1590467016694.jpg" alt="" loading="lazy"><br>
对于上图罗列的复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2n) 和 O(n!)。<br>
<img src="https://yeyouluo.github.io/post-images/1590467046059.jpg" alt="" loading="lazy"><br>
我们把时间复杂度为非多项式量级的算法问题叫作 <strong>NP（Non-Deterministic Polynomial，非确定多项式）问题</strong>。</p>
<p>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，<strong>非多项式时间复杂度的算法其实是非常低效的算法</strong>。以下是几种常见的多项式时间复杂度：</p>
<ol>
<li>O(1)</li>
</ol>
<p>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</p>
<ol start="2">
<li>O(logn)、O(nlogn)</li>
</ol>
<blockquote>
<p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。</p>
</blockquote>
<p>比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>
<ol start="3">
<li>O(m+n)、O(m*n)</li>
</ol>
<p>有两个数据规模，我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。</p>
<h4 id="最好-最坏-平均-均摊时间复杂度">最好、最坏、平均、均摊时间复杂度</h4>
<p>好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。<br>
最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。<br>
平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。</p>
<blockquote>
<p>很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>
</blockquote>
<p>均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</p>
<h3 id="空间复杂度分析">空间复杂度分析</h3>
<h4 id="概念-2">概念</h4>
<p>空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。</p>
<h4 id="常见的时间复杂度-2">常见的时间复杂度</h4>
<p>常见的空间复杂度就是 O(1)、O(n)、O(n2) 。</p>
<blockquote>
<ol>
<li>O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到 。</li>
<li>空间复杂度分析比时间复杂度分析要简单很多。</li>
</ol>
</blockquote>
<h2 id="工具">工具</h2>
<ul>
<li>算法可视化网站：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li>
</ul>
<h2 id="书籍推荐">书籍推荐</h2>
<p>by王争<br>
<img src="https://yeyouluo.github.io/post-images/1590510118154.jpg" alt="" loading="lazy"></p>
<h2 id="重难点一览表">重难点一览表</h2>
<table>
<thead>
<tr>
<th>序号</th>
<th>名称</th>
<th>难易程序</th>
<th>重点</th>
<th>掌握程度</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>复杂度分析</td>
<td>Medium</td>
<td>10</td>
<td>在不看我的分析的情况下，能自行分析专栏中大部分数据结构和算法的时间、空间复杂度</td>
</tr>
<tr>
<td>2</td>
<td>数组、栈、队列</td>
<td>Easy</td>
<td>8</td>
<td>能自己实现动态数组、栈、队列</td>
</tr>
<tr>
<td>3</td>
<td>链表</td>
<td>Medium</td>
<td>9</td>
<td>能轻松写出经典链表题目代码</td>
</tr>
<tr>
<td>4</td>
<td>递归</td>
<td>Hard</td>
<td>10</td>
<td>轻松写出二叉树遍历、八皇后、背包问题、DFS 的递归代码</td>
</tr>
<tr>
<td>5</td>
<td>排序、二分查找</td>
<td>Easy</td>
<td>7</td>
<td>能自己把各种排序算法、二分查找及其变体代码写一遍就可以</td>
</tr>
<tr>
<td>6</td>
<td>跳表</td>
<td>Medium</td>
<td>6</td>
<td>初学者可以先跳过。如果感兴趣，看懂专栏内容即可，不需要掌握代码实现</td>
</tr>
<tr>
<td>7</td>
<td>散列表</td>
<td>Medium</td>
<td>8</td>
<td>对于初学者来说，自己能代码实现一个拉链法解决冲突的散列表即可</td>
</tr>
<tr>
<td>8</td>
<td>哈希算法</td>
<td>Easy</td>
<td>3</td>
<td>可以暂时不看</td>
</tr>
<tr>
<td>9</td>
<td>二叉树</td>
<td>Medium</td>
<td>9</td>
<td>能代码实现二叉树的三种遍历算法、按层遍历、求高度等经典二叉树题目</td>
</tr>
<tr>
<td>10</td>
<td>红黑树</td>
<td>Hard</td>
<td>3</td>
<td>初学者不用把时间浪费在上面</td>
</tr>
<tr>
<td>11</td>
<td>B+ 树</td>
<td>Medium</td>
<td>5</td>
<td>可看可不看</td>
</tr>
<tr>
<td>12</td>
<td>堆与堆排序</td>
<td>Medium</td>
<td>8</td>
<td>能代码实现堆、堆排序，并且掌握堆的三种应用（优先级队列、Top k、中位数）</td>
</tr>
<tr>
<td>13</td>
<td>图的表示</td>
<td>Easy</td>
<td>8</td>
<td>理解图的三种表示方法（邻接矩阵、邻接表、逆邻接表），能自己代码实现</td>
</tr>
<tr>
<td>14</td>
<td>深度广度优先搜索</td>
<td>Hard</td>
<td>8</td>
<td>能代码实现广度优先、深度优先搜索算法。建议放在最后挑战。</td>
</tr>
<tr>
<td>15</td>
<td>拓扑排序、最短路径、A* 算法</td>
<td>Hard</td>
<td>5</td>
<td>有时间再看，暂时可以不看</td>
</tr>
<tr>
<td>16</td>
<td>字符串匹配（BF、RK）</td>
<td>Easy</td>
<td>7</td>
<td>能实践 BF 算法，能看懂 RK 算法</td>
</tr>
<tr>
<td>17</td>
<td>字符串匹配（BM、KMP、AC 自动机）</td>
<td>Hard</td>
<td>3</td>
<td>初学者不用把时间浪费在上面</td>
</tr>
<tr>
<td>18</td>
<td>字符串匹配（Trie）</td>
<td>Medium</td>
<td>7</td>
<td>能看懂，知道特点、应用场景即可，不要求代码实现</td>
</tr>
<tr>
<td>19</td>
<td>位图</td>
<td>Easy</td>
<td>6</td>
<td>看懂即可，能自己实现一个位图结构最好</td>
</tr>
<tr>
<td>20</td>
<td>四种算法思想</td>
<td>Hard</td>
<td>10</td>
<td>以放到最后，但是一定要掌握！做到能实现 Leetcode 上 Medium 难度的题目</td>
</tr>
</tbody>
</table>
<h2 id="致谢">致谢</h2>
<p>本系列笔记均来自于极客时间专栏《数据结构与算法之美》，作者王争。感谢极客时间及王争，能提供这么高质量的课程。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot集成MybatisPlus]]></title>
        <id>https://yeyouluo.github.io/post/springboot-ji-cheng-mybatisplus/</id>
        <link href="https://yeyouluo.github.io/post/springboot-ji-cheng-mybatisplus/">
        </link>
        <updated>2020-05-23T09:22:34.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="mybatisplus">MyBatisPlus</h2>
<p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。<br>
<a href="https://mybatis.plus/">MyBatisPlus官网</a></p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="mybatisplus">MyBatisPlus</h2>
<p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。<br>
<a href="https://mybatis.plus/">MyBatisPlus官网</a></p>
<!-- more -->
<h2 id="操作">操作</h2>
<p>参考<a href="https://mybatis.plus/guide/quick-start.html">MP快速开始</a>。文档写的很清晰，按图索骥即可，此处不再赘述。</p>
<h2 id="注意点">注意点</h2>
<ul>
<li>要么在入口类添加<code>@MapperScan(&quot;com.yeyouluo.mpspringboot.mapper&quot;)</code>注解，要么在<code>Mapper</code>类上添加<code>@Mapper</code>注解。否则启动报错。</li>
<li>如果要使用分页查询，还需要额外的配置，否则启动报错。</li>
<li>更多MyBatisPlus示例参考<a href="https://github.com/baomidou/mybatis-plus-samples">Github<br>
mybatis-plus-samples</a>。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot集成MyBatis]]></title>
        <id>https://yeyouluo.github.io/post/springboot-ji-cheng-mybatis/</id>
        <link href="https://yeyouluo.github.io/post/springboot-ji-cheng-mybatis/">
        </link>
        <updated>2020-05-23T08:20:33.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="mybatis">MyBatis</h2>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。<br>
<a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis官方文档</a></p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="mybatis">MyBatis</h2>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。<br>
<a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis官方文档</a></p>
<!-- more -->
<h2 id="操作">操作</h2>
<h3 id="数据准备">数据准备</h3>
<ul>
<li>建立名为<code>springboot</code>的<code>database</code></li>
<li>建立名为<code>user</code>的表<br>
<img src="https://yeyouluo.github.io/post-images/1590222199853.png" alt="" loading="lazy"></li>
<li>插入两条测试数据</li>
</ul>
<h3 id="pomxml引入mybatis和mysql相关依赖">pom.xml引入MyBatis和MySQL相关依赖</h3>
<pre><code class="language-xml"> &lt;dependency&gt;
     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
     &lt;version&gt;1.3.0&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
     &lt;groupId&gt;mysql&lt;/groupId&gt;
     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
     &lt;version&gt;5.1.49&lt;/version&gt;
 &lt;/dependency&gt;
</code></pre>
<h3 id="加入配置">加入配置</h3>
<p>在<code>application.properties</code>中加入如下配置：</p>
<pre><code class="language-properties"> spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 spring.datasource.url=jdbc:mysql://192.168.147.200:3307/springboot?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull
 spring.datasource.username=root
 spring.datasource.password=qwert
 #mybatis.config-location=classpath:mapper/*.xml
</code></pre>
<blockquote>
<p>因为我们不会采用xml编写mapper的方式，仅此将<code>mybatis.config-location=classpath:mapper/*.xml</code>注释掉。否则就需要在<code>resources</code>目录下建立<code>mapper</code>目录，所有的SQL放在<code>*.xml</code>中。</p>
</blockquote>
<h3 id="编写mapper">编写mapper</h3>
<pre><code class="language-java"> package com.yeyouluo.hellospringboot.mapper;

 import com.yeyouluo.hellospringboot.domain.User;
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Select;

 /**
 * @Auther: yeyouluo
 * @Date: 2020/5/23
 */
 @Mapper
 public interface UserMapper {
     @Select(&quot;select * from user where id = #{id}&quot;)
     User getUserById(@Param(&quot;id&quot;) Integer id);

     @Insert(&quot;insert into user (`name`, `sex`) values (#{name}, #{sex})&quot;)
     void insertUser(@Param(&quot;name&quot;) String name, @Param(&quot;sex&quot;) String sex);
 }
</code></pre>
<h3 id="编写controller">编写Controller</h3>
<p>在<code>HelloController</code>类种添加两个方法：</p>
<pre><code class="language-java"> @Autowired
 private UserMapper userMapper;

 @GetMapping(&quot;/user/{id}&quot;)
 public User getUser(@PathVariable Integer id) {
     return userMapper.getUserById(id);
 }

 @PostMapping(&quot;/user&quot;)
 public String insertUser(String name, String sex) {
     userMapper.insertUser(name, sex);
     return &quot;sucess&quot;;
 }
</code></pre>
<h3 id="测试">测试</h3>
<h4 id="测试查询接口">测试查询接口</h4>
<figure data-type="image" tabindex="1"><img src="https://yeyouluo.github.io/post-images/1590222862273.png" alt="" loading="lazy"></figure>
<h4 id="测试插入接口">测试插入接口</h4>
<ul>
<li>使用postman发送<code>POST</code>请求：<br>
<img src="https://yeyouluo.github.io/post-images/1590222942691.png" alt="" loading="lazy"></li>
<li>查看数据库插入结果：<br>
<img src="https://yeyouluo.github.io/post-images/1590223039968.png" alt="" loading="lazy"></li>
<li>使用查询接口查询结果：<br>
<img src="https://yeyouluo.github.io/post-images/1590223076865.png" alt="" loading="lazy"></li>
</ul>
<h2 id="遇到的问题">遇到的问题</h2>
<h3 id="出现ssl相关警告">出现SSL相关警告</h3>
<ul>
<li>
<p>现象<br>
<code>application.properties</code>中配置<code>spring.datasource.url=jdbc:mysql://192.168.147.200:3307/springboot?useUnicode=true&amp;zeroDateTimeBehavior=convertToNull</code><br>
能够正常查询，但控制台出现错误：</p>
<pre><code>Sat May 23 15:23:31 CST 2020 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://yeyouluo.github.io/post-images/1590223160959.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>解决<br>
将配置项<code>spring.datasource.url</code>改为<code>=jdbc:mysql://192.168.147.200:3307/springboot?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</code>。</p>
<h3 id="出现字符集utf8mb4相关错误">出现字符集<code>utf8mb4</code>相关错误</h3>
</li>
<li>
<p>现象<br>
<code>application.properties</code>中配置<code>spring.datasource.url=jdbc:mysql://192.168.147.200:3307/springboot?useUnicode=true&amp;characterEncoding=utf8mb4&amp;useSSL=false</code><br>
可以启动，但是访问接口报错：</p>
</li>
</ul>
<pre><code>2020-05-23 15:36:53.489 ERROR 30188 --- [nio-8080-exec-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

java.sql.SQLException: Unsupported character encoding 'utf8mb4'.
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:898) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:887) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:861) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.ConnectionPropertiesImpl.postInitialization(ConnectionPropertiesImpl.java:2575) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.ConnectionPropertiesImpl.initializeProperties(ConnectionPropertiesImpl.java:2545) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.ConnectionImpl.initializeDriverProperties(ConnectionImpl.java:3109) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:758) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:47) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_172]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_172]
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:403) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:385) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:323) ~[mysql-connector-java-5.1.49.jar:5.1.49]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.4.5.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82) [mybatis-spring-1.3.1.jar:1.3.1]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68) [mybatis-spring-1.3.1.jar:1.3.1]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77) [mybatis-3.4.4.jar:3.4.4]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433) [mybatis-spring-1.3.1.jar:1.3.1]
	at com.sun.proxy.$Proxy56.selectOne(Unknown Source) [na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166) [mybatis-spring-1.3.1.jar:1.3.1]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:82) [mybatis-3.4.4.jar:3.4.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59) [mybatis-3.4.4.jar:3.4.4]
	at com.sun.proxy.$Proxy59.getUserById(Unknown Source) [na:na]
	at com.yeyouluo.hellospringboot.controller.HelloController.getUser(HelloController.java:49) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_172]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_172]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_172]
</code></pre>
<ul>
<li>解决<br>
参考了<a href="https://blog.csdn.net/testcs_dn/article/details/75533784">https://blog.csdn.net/testcs_dn/article/details/75533784</a>，将<code>characterEncoding=utf8mb4</code>去掉。
<blockquote>
<p>注意，上面这种方式也会有副作用，即插入汉字会乱码。因此最终将字符集换成了<code>UTF-8</code>，但这仍然不是最好的解决办法。</p>
</blockquote>
</li>
</ul>
<h2 id="其他收获">其他收获</h2>
<p><img src="https://yeyouluo.github.io/post-images/1590222291857.png" alt="" loading="lazy"><br>
通过控制台打印出的日志，可以知道，SpringBoot默认的连接池是<a href="https://github.com/brettwooldridge/HikariCP">HikariPool</a>。</p>
<h2 id="springboot事务">SpringBoot事务</h2>
<p>简单来说，在需要执行事务的方法上添加一个注解<code>@Transactional</code>。可参考<a href="https://www.jianshu.com/p/9b5eb43236cc">https://www.jianshu.com/p/9b5eb43236cc</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot集成Thymeleaf]]></title>
        <id>https://yeyouluo.github.io/post/springboot-ji-cheng-thymeleaf/</id>
        <link href="https://yeyouluo.github.io/post/springboot-ji-cheng-thymeleaf/">
        </link>
        <updated>2020-05-22T16:21:25.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="jsp的缺点">JSP的缺点</h2>
<p>JSP会被编译成为Servlet，重量级。<br>
JSP的缺点就是模板的优点。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="jsp的缺点">JSP的缺点</h2>
<p>JSP会被编译成为Servlet，重量级。<br>
JSP的缺点就是模板的优点。</p>
<!-- more -->
<h2 id="除thymeleaf还有哪些模板">除Thymeleaf，还有哪些模板</h2>
<ul>
<li><a href="http://freemarker.foofun.cn/">Freemarker</a></li>
<li><a href="http://docs.groovy-lang.org/latest/html/documentation/template-engines.html">Groovy</a></li>
</ul>
<h2 id="理论">理论</h2>
<p>SpringBoot模板默认配置的目录是<code>templates</code>。</p>
<h2 id="操作">操作</h2>
<ol>
<li>
<p>引入Thymeleaf依赖（pom.xml）</p>
<pre><code class="language-xml">&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>添加配置（可省略，则使用默认配置）</p>
<pre><code class="language-properties">spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
</code></pre>
</li>
<li>
<p>代码开发和页面效果测试</p>
<p>controller层：添加一个<code>PageController</code>类</p>
<pre><code class="language-java">package com.yeyouluo.hellospringboot.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

/**
 * @Auther: yeyouluo
 * @Date: 2020/5/23
 */
@Controller
public class PageController {

    @RequestMapping(&quot;/index&quot;)
    public String index(Model model) {
        model.addAttribute(&quot;name&quot;, &quot;yeyouluo&quot;);
        return &quot;index&quot;;
    }
}
</code></pre>
<p>在<code>resources/templates</code>目录下新建一个HTML5页面<code>index.html</code>，内容如下：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;测试页面&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;hello,Thymeleaf&lt;/h1&gt;
    &lt;p&gt;by &lt;span th:text=&quot;${name}&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>启动查看效果<br>
<img src="https://yeyouluo.github.io/post-images/1590166450367.png" alt="" loading="lazy"></p>
</li>
</ol>
<h2 id="其他收获">其他收获</h2>
<ul>
<li>可以使用<code>Model</code>传递给页面参数。页面使用<code>${xxx}</code>获取（<code>Thymeleaf</code>语法）。</li>
<li><code>Thymeleaf</code>基础知识（整理自<a href="https://www.jianshu.com/p/908b48b10702">https://www.jianshu.com/p/908b48b10702</a>）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://yeyouluo.github.io/post-images/1590168591149.png" alt="" loading="lazy"></figure>
<h2 id="thymeleaf参考资料">Thymeleaf参考资料</h2>
<ul>
<li><a href="https://www.thymeleaf.org/">Thymeleaf官方文档</a></li>
<li><a href="https://www.jianshu.com/p/908b48b10702">SpringBoot Thymeleaf使用教程（实用版）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot捕获全局异常]]></title>
        <id>https://yeyouluo.github.io/post/springboot-bu-huo-quan-ju-yi-chang/</id>
        <link href="https://yeyouluo.github.io/post/springboot-bu-huo-quan-ju-yi-chang/">
        </link>
        <updated>2020-05-21T15:16:14.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="理论">理论</h2>
<ul>
<li>从 spring 3.2 开始，新增了 <code>@ControllerAdvice</code> 注解，可以用于定义 <code>@ExceptionHandler</code>，并应用到配置了 <code>@RequestMapping</code> 的控制器中。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="理论">理论</h2>
<ul>
<li>
<p>从 spring 3.2 开始，新增了 <code>@ControllerAdvice</code> 注解，可以用于定义 <code>@ExceptionHandler</code>，并应用到配置了 <code>@RequestMapping</code> 的控制器中。</p>
<!-- more -->
<h2 id="操作">操作</h2>
<ol>
<li>定义全局异常捕捉Controller</li>
</ol>
<pre><code class="language-java">package com.yeyouluo.hellospringboot.exception;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;

@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(value = RuntimeException.class)
    @ResponseBody
    public String handle() {
        return &quot;捕获到全局RuntimeException&quot;;
    }
}
</code></pre>
</li>
</ul>
<ol start="2">
<li>抛出异常<pre><code class="language-java">@GetMapping(&quot;/exception&quot;)
 public String testException(){
     System.out.println(&quot;开始&quot;);

     System.out.println(2/0);

     System.out.println(&quot;结束&quot;);
     return &quot;SpringBoot OK&quot;;
 }
</code></pre>
</li>
<li>结果验证<br>
<img src="https://yeyouluo.github.io/post-images/1590075093881.png" alt="" loading="lazy"></li>
</ol>
<h2 id="局限">局限</h2>
<p>使用 <code>@ControllerAdvice</code>处理异常也有一定的 局限性。只有进入 Controller 层的错误，才会由 <code>@ControllerAdvice</code> 处理。拦截器 抛出的错误，以及 访问错误地址 的情况 <code>@ControllerAdvice</code> 处理不了，由 Spring Boot 默认的 异常处理机制 处理。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://blog.csdn.net/baidu_22254181/java/article/details/80789076">实战Spring Boot 2.0系列(二) - 全局异常处理和测试</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot访问静态文件]]></title>
        <id>https://yeyouluo.github.io/post/springboot-fang-wen-jing-tai-wen-jian/</id>
        <link href="https://yeyouluo.github.io/post/springboot-fang-wen-jing-tai-wen-jian/">
        </link>
        <updated>2020-05-21T14:22:27.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="理论知识">理论知识</h2>
<p>SpringBoot默认扫描的静态目录为<code>static</code>，因此将静态文件放到<code>static</code>目录下就可以了。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="理论知识">理论知识</h2>
<p>SpringBoot默认扫描的静态目录为<code>static</code>，因此将静态文件放到<code>static</code>目录下就可以了。</p>
<!-- more -->
<h2 id="操作">操作</h2>
<ol>
<li>将静态文件放到<code>static</code>目录<br>
<img src="https://yeyouluo.github.io/post-images/1590071471333.png" alt="" loading="lazy"></li>
<li>访问，效果符合预期<br>
<img src="https://yeyouluo.github.io/post-images/1590071481534.png" alt="" loading="lazy"><br>
<img src="https://yeyouluo.github.io/post-images/1590071490901.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一个SpringBoot程序]]></title>
        <id>https://yeyouluo.github.io/post/springboot-01-hello-world/</id>
        <link href="https://yeyouluo.github.io/post/springboot-01-hello-world/">
        </link>
        <updated>2020-05-21T13:39:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="使用springboot-initializer创建项目">使用SpringBoot   initializer创建项目</h2>
<p>spring官方：https://start.springboot.io/<br>
阿里云：https://start.aliyun.com/<br>
Idea内置的initializer是spring官方的。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="使用springboot-initializer创建项目">使用SpringBoot   initializer创建项目</h2>
<p>spring官方：https://start.springboot.io/<br>
阿里云：https://start.aliyun.com/<br>
Idea内置的initializer是spring官方的。</p>
<!-- more -->
<h2 id="springboot官方文档">SpringBoot官方文档</h2>
<p>https://spring.io/projects/spring-boot</p>
<h2 id="步骤">步骤</h2>
<h3 id="生成项目">生成项目</h3>
<p><img src="https://yeyouluo.github.io/post-images/1590069974434.png" alt="" loading="lazy"><br>
<img src="https://yeyouluo.github.io/post-images/1590069986825.png" alt="" loading="lazy"></p>
<h3 id="编写controller">编写Controller</h3>
<p>要点：</p>
<ul>
<li>在入口类<code>HelloSpringbootApplication</code>平级目录建立Controller目录</li>
<li>Controller类使用<code>@RestController</code>或<code>@Controller</code>注解</li>
</ul>
<blockquote>
<p>查看源码，<code>@RestController</code>比<code>@Controller</code>多一个<code>@ResponseBody</code>注解，因此只能返回JSON值。如果要返回页面，应使用<code>@Controller</code>注解Controller类。</p>
</blockquote>
<ul>
<li>
<p>方法上使用<code>@RequestMapping</code>或<code>@GetMapping</code>注解</p>
<p>示例：</p>
<pre><code class="language-java">package com.yeyouluo.hellospringboot.controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class HelloController {
//    @GetMapping(value=&quot;/hello&quot;)
//    public String sayHello(String name){
//        return &quot;hello,&quot; + name;
//    }
//    @GetMapping(value=&quot;/hello&quot;)
//    public String sayHello(@RequestParam(value = &quot;name&quot;, required = false) String name){
//        return &quot;hello,&quot; + name;
//    }
    @GetMapping(value=&quot;/hello/{name}&quot;)
    public String sayHello(@PathVariable String name){
    return &quot;hello,&quot; + name;
    }
}

</code></pre>
</li>
</ul>
<h2 id="其他收获">其他收获</h2>
<p>传参数的两种形式：</p>
<ol>
<li>作为请求参数：方法的参数前使用<code>@RequestParam</code>注解或者不使用任何注解。二者区别在于：如果不写，相当于<code>@RequestParam(required = false)</code>。浏览器访问路径为<code>?key=xxx</code>。</li>
<li>作为路径参数：请求路径使用<code>{key}</code>构造路径，并且方法的参数前使用<code>@PathVariable</code>注解。浏览器访问路径为<code>/key</code>。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot资源整理]]></title>
        <id>https://yeyouluo.github.io/post/springboot-zi-yuan-zheng-li/</id>
        <link href="https://yeyouluo.github.io/post/springboot-zi-yuan-zheng-li/">
        </link>
        <updated>2020-05-21T12:04:03.000Z</updated>
        <summary type="html"><![CDATA[<p>本文主要收集SpringBoot网络资源。该文章会持续更新。<br>
若收录的资源涉及版权问题，请及时联系，我会予以删除整改。</p>
<h2 id="书籍">书籍</h2>
<ul>
<li><a href="http://blog.didispace.com/books/spring-boot-reference/">Spring Boot参考指南</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>本文主要收集SpringBoot网络资源。该文章会持续更新。<br>
若收录的资源涉及版权问题，请及时联系，我会予以删除整改。</p>
<h2 id="书籍">书籍</h2>
<ul>
<li><a href="http://blog.didispace.com/books/spring-boot-reference/">Spring Boot参考指南</a><!-- more -->
</li>
</ul>
<h2 id="网站">网站</h2>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">SpringBoot官方文档</a></li>
</ul>
<h2 id="github项目">Github项目</h2>
<ul>
<li><a href="https://github.com/ityouknow/spring-boot-examples">spring-boot-examples</a></li>
<li><a href="https://github.com/ityouknow/awesome-spring-boot">awesome-spring-boot</a></li>
<li><a href="https://github.com/wuyouzhuguli/SpringAll">SpringAll</a></li>
</ul>
<h2 id="视频">视频</h2>
<p>码家学院教程：<a href="https://pan.baidu.com/s/1Yv1ttP1_b6ORrTGLPQ1n1g">https://pan.baidu.com/s/1Yv1ttP1_b6ORrTGLPQ1n1g</a> 提取码：gcjo</p>
<blockquote>
<p>后续的几篇文章都是基于该视频，在此感谢~</p>
</blockquote>
]]></content>
    </entry>
</feed>