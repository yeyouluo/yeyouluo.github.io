import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.BZemHgQ6.js";const l="/assets/es-th-2-3.BFkNS9o6.png",h="/assets/es-th-2-2.CcqAHAFL.png",n="/assets/es-th-3-1.DNUjBooN.png",p="/assets/es-th-3-2.Byir3J-k.jpeg",r="/assets/es-th-3-21.Bba64NmZ.jpeg",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"big-data/es/es-th-2.md","filePath":"big-data/es/es-th-2.md","lastUpdated":1732555743000}'),k={name:"big-data/es/es-th-2.md"};function c(o,s,d,g,F,u){return e(),i("div",null,s[0]||(s[0]=[t('<nav class="table-of-contents"><ul><li><a href="#引言">引言</a></li><li><a href="#elasticsearch整体结构">ElasticSearch整体结构</a></li><li><a href="#补充-lucene索引结构">补充:Lucene索引结构</a></li><li><a href="#补充-lucene处理流程">补充:Lucene处理流程</a></li><li><a href="#补充-elasticsearch分析器">补充:ElasticSearch分析器</a><ul><li><a href="#内置分析器">内置分析器</a></li><li><a href="#什么时候使用分析器">什么时候使用分析器</a></li></ul></li><li><a href="#参考文章">参考文章</a></li></ul></nav><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>通过上文图解了解了ES整体的原理后，我们便可以基于此知识体系下梳理下ES的整体结构以及相关的知识点，这将帮助你更好的理解ElasticSearch索引文档和搜索文档的原理。</p><h2 id="elasticsearch整体结构" tabindex="-1">ElasticSearch整体结构 <a class="header-anchor" href="#elasticsearch整体结构" aria-label="Permalink to &quot;ElasticSearch整体结构&quot;">​</a></h2><blockquote><p>通过上文，在通过图解了解了ES整体的原理后，我们梳理下ES的整体结构</p></blockquote><p><img src="'+l+'" alt="img"></p><ul><li>一个 ES Index 在集群模式下，有多个 Node （节点）组成。每个节点就是 ES 的Instance (实例)。</li><li>每个节点上会有多个 shard （分片）， P1 P2 是主分片, R1 R2 是副本分片</li><li>每个分片上对应着就是一个 Lucene Index（底层索引文件）</li><li>Lucene Index 是一个统称 <ul><li>由多个 Segment （段文件，就是倒排索引）组成。每个段文件存储着就是 Doc 文档。</li><li>commit point记录了所有 segments 的信息</li></ul></li></ul><h2 id="补充-lucene索引结构" tabindex="-1">补充:Lucene索引结构 <a class="header-anchor" href="#补充-lucene索引结构" aria-label="Permalink to &quot;补充:Lucene索引结构&quot;">​</a></h2><blockquote><p>上图中Lucene的索引结构中有哪些文件呢？</p></blockquote><p><img src="'+h+'" alt="img"></p><p>（更多文件类型可参考<a href="http://lucene.apache.org/core/7_2_1/core/org/apache/lucene/codecs/lucene70/package-summary.html#package.description" target="_blank" rel="noreferrer">这里</a>）</p><p><img src="'+n+'" alt="img"></p><p>文件的关系如下：</p><p><img src="'+p+'" alt="img"></p><h2 id="补充-lucene处理流程" tabindex="-1">补充:Lucene处理流程 <a class="header-anchor" href="#补充-lucene处理流程" aria-label="Permalink to &quot;补充:Lucene处理流程&quot;">​</a></h2><blockquote><p>上文图解过程，还需要理解Lucene处理流程, 这将帮助你更好的索引文档和搜索文档。</p></blockquote><p><img src="'+r+`" alt="img"></p><p>创建索引的过程：</p><ul><li>准备待索引的原文档，数据来源可能是文件、数据库或网络</li><li>对文档的内容进行分词组件处理，形成一系列的Term</li><li>索引组件对文档和Term处理，形成字典和倒排表</li></ul><p>搜索索引的过程：</p><ul><li>对查询语句进行分词处理，形成一系列Term</li><li>根据倒排索引表查找出包含Term的文档，并进行合并形成符合结果的文档集</li><li>比对查询语句与各个文档相关性得分，并按照得分高低返回</li></ul><h2 id="补充-elasticsearch分析器" tabindex="-1">补充:ElasticSearch分析器 <a class="header-anchor" href="#补充-elasticsearch分析器" aria-label="Permalink to &quot;补充:ElasticSearch分析器&quot;">​</a></h2><blockquote><p>上图中很重要的一项是<strong>语法分析/语言处理</strong>, 所以我们还需要补充ElasticSearch分析器知识点。</p></blockquote><p>分析 包含下面的过程：</p><ul><li>首先，将一块文本分成适合于倒排索引的独立的 词条 ，</li><li>之后，将这些词条统一化为标准格式以提高它们的“可搜索性”，或者 recall</li></ul><p>分析器执行上面的工作。 分析器 实际上是将三个功能封装到了一个包里：</p><ul><li><strong>字符过滤器</strong> 首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉HTML，或者将 &amp; 转化成 and。</li><li><strong>分词器</strong> 其次，字符串被 分词器 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</li><li><strong>Token 过滤器</strong> 最后，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化 Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像 jump 和 leap 这种同义词）。</li></ul><p>Elasticsearch提供了开箱即用的字符过滤器、分词器和token 过滤器。 这些可以组合起来形成自定义的分析器以用于不同的目的。</p><h3 id="内置分析器" tabindex="-1">内置分析器 <a class="header-anchor" href="#内置分析器" aria-label="Permalink to &quot;内置分析器&quot;">​</a></h3><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;</span></span></code></pre></div><ul><li><strong>标准分析器</strong></li></ul><p>标准分析器是Elasticsearch默认使用的分析器。它是分析各种语言文本最常用的选择。它根据 Unicode 联盟 定义的 <strong>单词边界</strong> 划分文本。删除绝大部分标点。最后，将词条小写。它会产生</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shape,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> semi,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transparent,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> calling,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set_trans,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><ul><li><strong>简单分析器</strong></li></ul><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shape,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> semi,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transparent,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> calling,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trans</span></span></code></pre></div><ul><li><strong>空格分析器</strong></li></ul><p>空格分析器在空格的地方划分文本。它会产生</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Set,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shape,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> semi-transparent,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> calling,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set_trans</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><strong>语言分析器</strong></li></ul><p>特定语言分析器可用于 很多语言。它们可以考虑指定语言的特点。例如， 英语 分析器附带了一组英语无用词（常用单词，例如 and 或者 the ，它们对相关性没有多少影响），它们会被删除。 由于理解英语语法的规则，这个分词器可以提取英语单词的 词干 。</p><p>英语 分词器会产生下面的词条：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shape,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> semi,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transpar,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> call,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set_tran,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>注意看 transparent、 calling 和 set_trans 已经变为词根格式。</p><h3 id="什么时候使用分析器" tabindex="-1">什么时候使用分析器 <a class="header-anchor" href="#什么时候使用分析器" aria-label="Permalink to &quot;什么时候使用分析器&quot;">​</a></h3><p>当我们 索引 一个文档，它的全文域被分析成词条以用来创建倒排索引。 但是，当我们在全文域 搜索 的时候，我们需要将查询字符串通过 相同的分析过程 ，以保证我们搜索的词条格式与索引中的词条格式一致。</p><p>全文查询，理解每个域是如何定义的，因此它们可以做正确的事：</p><ul><li>当你查询一个 全文 域时， 会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</li><li>当你查询一个 精确值 域时，不会分析查询字符串，而是搜索你指定的精确值。</li></ul><blockquote><p>举个例子</p></blockquote><p>ES中每天一条数据， 按照如下方式查询：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2014</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 12 results</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=2014-09-15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 12 results !</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=date:2014-09-15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 1  result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=date:2014</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 0  results !</span></span></code></pre></div><p>为什么返回那样的结果？</p><ul><li>date 域包含一个精确值：单独的词条 2014-09-15。</li><li>_all 域是一个全文域，所以分词进程将日期转化为三个词条： 2014， 09， 和 15。</li></ul><p>当我们在 _all 域查询 2014，它匹配所有的12条推文，因为它们都含有 2014 ：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2014</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 12 results</span></span></code></pre></div><p>当我们在 _all 域查询 2014-09-15，它首先分析查询字符串，产生匹配 2014， 09， 或 15 中 任意 词条的查询。这也会匹配所有12条推文，因为它们都含有 2014 ：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=2014-09-15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 12 results !</span></span></code></pre></div><p>当我们在 date 域查询 2014-09-15，它寻找 精确 日期，只找到一个推文：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=date:2014-09-15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 1  result</span></span></code></pre></div><p>当我们在 date 域查询 2014，它找不到任何文档，因为没有文档含有这个精确日志：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_search?q=date:2014</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 0  results !</span></span></code></pre></div><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://new.qq.com/omn/20210320/20210320A01XHF00.html" target="_blank" rel="noreferrer">https://new.qq.com/omn/20210320/20210320A01XHF00.html</a></li><li><a href="https://juejin.cn/post/6844903473666867208" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903473666867208</a></li><li><a href="http://lucene.apache.org/core/7_2_1/core/org/apache/lucene/codecs/lucene70/package-summary.html#package.description" target="_blank" rel="noreferrer">http://lucene.apache.org/core/7_2_1/core/org/apache/lucene/codecs/lucene70/package-summary.html#package.description</a></li></ul><hr><p>著作权归@pdai所有 原文链接：<a href="https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-2.html" target="_blank" rel="noreferrer">https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-2.html</a></p>`,66)]))}const C=a(k,[["render",c]]);export{y as __pageData,C as default};
