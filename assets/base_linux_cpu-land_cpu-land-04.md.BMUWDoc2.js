import{_ as i,c as o,o as e,ag as t}from"./chunks/framework.BZemHgQ6.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"base/linux/cpu-land/cpu-land-04.md","filePath":"base/linux/cpu-land/cpu-land-04.md","lastUpdated":1716462420000}'),n={name:"base/linux/cpu-land/cpu-land-04.md"};function a(r,l,c,p,s,u){return e(),o("div",null,l[0]||(l[0]=[t('<h3 id="第四章-成为elf领主" tabindex="-1">第四章：成为Elf领主 <a class="header-anchor" href="#第四章-成为elf领主" aria-label="Permalink to &quot;第四章：成为Elf领主&quot;">​</a></h3><blockquote><p>这篇文章是关于ELF（可执行和链接格式）文件如何在Linux系统中被执行的详细解析。</p></blockquote><p><strong>1. ELF文件格式：</strong></p><ul><li>ELF是最常用的Linux程序文件格式。</li><li>ELF文件由四个部分组成：ELF头部、程序头部表（PHT）、节头部表（SHT）和数据部分。</li></ul><p><strong>2. ELF头部：</strong></p><ul><li>包含关于二进制文件的基本信息，如目标处理器架构、是否为可执行文件、程序入口点等。</li><li>指定PHT和SHT的位置。</li></ul><p><strong>3. 程序头部表（PHT）：</strong></p><ul><li>描述如何以及在何处将ELF文件的数据加载到内存中。</li><li>常见的PHT类型包括<code>PT_LOAD</code>（要加载到内存的数据）、<code>PT_NOTE</code>（版权声明等自由格式文本）、<code>PT_DYNAMIC</code>（动态链接信息）和<code>PT_INTERP</code>（ELF解释器的路径）。</li></ul><p><strong>4. 节头部表（SHT）：</strong></p><ul><li>可选的“地图”，帮助调试器理解ELF文件中数据的预期用途。</li><li>包含节的名称、类型和标志。</li></ul><p><strong>5. 数据：</strong></p><ul><li>PHT和SHT指向的数据块，包含程序的机器代码、初始化数据、BSS段、只读数据等。</li></ul><p><strong>6. 动态链接：</strong></p><ul><li>与静态链接相比，动态链接只包含对库函数的引用，而不是库代码本身。</li><li>运行时，操作系统需要确定所需的库，加载它们，替换所有命名指针为实际的跳转指令，然后启动程序代码。</li></ul><p><strong>7. ELF解释器：</strong></p><ul><li>动态链接的程序需要通过ELF解释器来运行，它负责加载所需的库并初始化程序。</li></ul><p><strong>8. 执行过程：</strong></p><ul><li>内核读取ELF头部和PHT，设置新程序的内存结构。</li><li>加载所有<code>PT_LOAD</code>段到内存，填充程序的静态数据、BSS空间和机器代码。</li><li>如果程序是动态链接的，内核还需要执行ELF解释器。</li><li>设置CPU的指令指针，如果是动态链接，指向ELF解释器的代码；否则指向可执行文件的开始。</li><li>内核将<code>argc</code>、<code>argv</code>和环境变量推送到栈上，供程序开始时读取。</li><li>清空寄存器，准备返回用户空间。</li><li>系统调用结束，内核返回用户空间，恢复寄存器，并跳转到存储的指令指针，这将是新程序（或ELF解释器）的起始点。</li></ul><p>文章深入探讨了ELF文件的结构和执行过程，解释了静态链接和动态链接的区别，以及Linux内核如何处理和执行ELF文件。这些信息对于理解Linux系统上的程序执行机制非常有用。</p>',19)]))}const L=i(n,[["render",a]]);export{_ as __pageData,L as default};
